plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
}

def propertiesFile = file("personal.properties")

if (propertiesFile.exists()) {
    def properties = new Properties()
    propertiesFile.withInputStream { stream ->
        properties.load(stream)
    }

    properties.each { key, value ->
        project.ext[key] = value
    }
}

project.ext {
    javaVersion = property('java.version')
    targetFolder = file('target/')
    apiFolder = file('target-api/')
}

allprojects {

    group = 'fr.groupez'
    version = property('plugin.version')

    apply {
        plugin 'java'
        plugin 'io.github.goooler.shadow'
    }

    repositories {
        mavenCentral()
        maven {
            name = "jitpack"
            url = 'https://jitpack.io'
        }
        maven {
            name = "spigotmc-repo"
            url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
        }
        maven {
            name = "papermc-repo"
            url = "https://repo.papermc.io/repository/maven-public/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
        maven {
            url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
        }
    }

    dependencies {
        compileOnly("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT")
        compileOnly "dev.dejvokep:boosted-yaml:1.3.6"
        compileOnly 'me.clip:placeholderapi:2.11.6'

        compileOnly 'com.github.Maxlego08:zTranslator:1.0.0.0'
        compileOnly 'com.mojang:authlib:3.11.50' //only java 16 or newer
        //compileOnly 'com.mojang:authlib:1.6.25'
        implementation 'com.github.cryptomorin:XSeries:11.2.1'
        implementation "com.github.technicallycoded:FoliaLib:main-SNAPSHOT"
    }

}

dependencies {
    implementation project(':API')
}

shadowJar {
    dependsOn(jar)

// Exclude specific files
    exclude 'com/cryptomorin/xseries/messages/*'
    exclude 'com/cryptomorin/xseries/particles/*'
    exclude 'com/cryptomorin/xseries/XBiome*'
    exclude 'com/cryptomorin/xseries/NMSExtras*'
    exclude 'com/cryptomorin/xseries/NoteBlockMusic*'
    exclude 'com/cryptomorin/xseries/SkullCacheListener*'
    exclude 'com/cryptomorin/xseries/XTag*'
    exclude 'com/cryptomorin/xseries/XPotion*'
    exclude 'com/cryptomorin/xseries/XMaterial*'
    exclude 'com/cryptomorin/xseries/XItemStack*'
    exclude 'com/cryptomorin/xseries/XBlock*'
    exclude 'com/cryptomorin/xseries/XEntity*'
    exclude 'com/cryptomorin/xseries/XEnchantment*'
    exclude 'com/cryptomorin/xseries/SkullUtils*'
    exclude 'com/cryptomorin/xseries/ReflectionUtils*'

    // Relocate packages
    relocate 'com.cryptomorin.xseries', 'fr.groupez.api.zcore.utils.xseries'
    relocate 'com.tcoded.folialib', 'fr.groupez.api.scheduler'

    archiveFileName = rootProject.name + "-" + rootProject.version + ".jar"
    destinationDirectory = rootProject.targetFolder
}

def targetJavaVersion = javaVersion as int
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version, name: rootProject.name]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('**/*.yml') {
        expand props
    }
}

tasks.register('publish') {
    dependsOn ':API:publish'
}

tasks.register('copyFiles', Copy) {
    from "${rootProject.targetFolder}"
    into rootProject.testFolder
}

if(propertiesFile.exists()) {
    shadowJar.finalizedBy('copyFiles')
} else {
    println "No personal.properties file found, skipping copyFiles task"
}

build.finalizedBy(shadowJar)
build.shouldRunAfter subprojects.build

shadowJar.dependsOn subprojects.build
compileJava.dependsOn childProjects.values().shadowJar
